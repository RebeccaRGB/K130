#include "layout_jis.h"
#include "layouts.h"

unsigned long layout_jis(unsigned char code, unsigned char state) {
  switch (code) {
    case 0x04: return (state & LAYOUT_CL_SH) ? 0x41 : 0x61; // A a
    case 0x05: return (state & LAYOUT_CL_SH) ? 0x42 : 0x62; // B b
    case 0x06: return (state & LAYOUT_CL_SH) ? 0x43 : 0x63; // C c
    case 0x07: return (state & LAYOUT_CL_SH) ? 0x44 : 0x64; // D d
    case 0x08: return (state & LAYOUT_CL_SH) ? 0x45 : 0x65; // E e
    case 0x09: return (state & LAYOUT_CL_SH) ? 0x46 : 0x66; // F f
    case 0x0A: return (state & LAYOUT_CL_SH) ? 0x47 : 0x67; // G g
    case 0x0B: return (state & LAYOUT_CL_SH) ? 0x48 : 0x68; // H h
    case 0x0C: return (state & LAYOUT_CL_SH) ? 0x49 : 0x69; // I i
    case 0x0D: return (state & LAYOUT_CL_SH) ? 0x4A : 0x6A; // J j
    case 0x0E: return (state & LAYOUT_CL_SH) ? 0x4B : 0x6B; // K k
    case 0x0F: return (state & LAYOUT_CL_SH) ? 0x4C : 0x6C; // L l
    case 0x10: return (state & LAYOUT_CL_SH) ? 0x4D : 0x6D; // M m
    case 0x11: return (state & LAYOUT_CL_SH) ? 0x4E : 0x6E; // N n
    case 0x12: return (state & LAYOUT_CL_SH) ? 0x4F : 0x6F; // O o
    case 0x13: return (state & LAYOUT_CL_SH) ? 0x50 : 0x70; // P p
    case 0x14: return (state & LAYOUT_CL_SH) ? 0x51 : 0x71; // Q q
    case 0x15: return (state & LAYOUT_CL_SH) ? 0x52 : 0x72; // R r
    case 0x16: return (state & LAYOUT_CL_SH) ? 0x53 : 0x73; // S s
    case 0x17: return (state & LAYOUT_CL_SH) ? 0x54 : 0x74; // T t
    case 0x18: return (state & LAYOUT_CL_SH) ? 0x55 : 0x75; // U u
    case 0x19: return (state & LAYOUT_CL_SH) ? 0x56 : 0x76; // V v
    case 0x1A: return (state & LAYOUT_CL_SH) ? 0x57 : 0x77; // W w
    case 0x1B: return (state & LAYOUT_CL_SH) ? 0x58 : 0x78; // X x
    case 0x1C: return (state & LAYOUT_CL_SH) ? 0x59 : 0x79; // Y y
    case 0x1D: return (state & LAYOUT_CL_SH) ? 0x5A : 0x7A; // Z z
    case 0x1E: return (state & LAYOUT_SHIFT) ? 0x21 : 0x31; // ! 1
    case 0x1F: return (state & LAYOUT_SHIFT) ? 0x22 : 0x32; // " 2
    case 0x20: return (state & LAYOUT_SHIFT) ? 0x23 : 0x33; // # 3
    case 0x21: return (state & LAYOUT_SHIFT) ? 0x24 : 0x34; // $ 4
    case 0x22: return (state & LAYOUT_SHIFT) ? 0x25 : 0x35; // % 5
    case 0x23: return (state & LAYOUT_SHIFT) ? 0x26 : 0x36; // & 6
    case 0x24: return (state & LAYOUT_SHIFT) ? 0x27 : 0x37; // ' 7
    case 0x25: return (state & LAYOUT_SHIFT) ? 0x28 : 0x38; // ( 8
    case 0x26: return (state & LAYOUT_SHIFT) ? 0x29 : 0x39; // ) 9
    case 0x27: return (state & LAYOUT_SHIFT) ? 0x7C : 0x30; // | 0
    case 0x2C: return 0x20; // space
    case 0x2D: return (state & LAYOUT_SHIFT) ? 0x3D : 0x2D; // = -
    case 0x2E: return (state & LAYOUT_SHIFT) ? 0x7E : 0x5E; // ~ ^
    case 0x2F: return (state & LAYOUT_SHIFT) ? 0x60 : 0x40; // ` @
    case 0x30: return (state & LAYOUT_SHIFT) ? 0x7B : 0x5B; // { [
    case 0x31: return (state & LAYOUT_SHIFT) ? 0x7D : 0x5D; // } ] (ANSI)
    case 0x32: return (state & LAYOUT_SHIFT) ? 0x7D : 0x5D; // } ] (ISO/JIS)
    case 0x33: return (state & LAYOUT_SHIFT) ? 0x2B : 0x3B; // + ;
    case 0x34: return (state & LAYOUT_SHIFT) ? 0x2A : 0x3A; // * :
    case 0x35: return (state & LAYOUT_SHIFT) ? 0x5F : 0x5C; // _ \ (ANSI/ISO)
    case 0x36: return (state & LAYOUT_SHIFT) ? 0x3C : 0x2C; // < ,
    case 0x37: return (state & LAYOUT_SHIFT) ? 0x3E : 0x2E; // > .
    case 0x38: return (state & LAYOUT_SHIFT) ? 0x3F : 0x2F; // ? /
    case 0x64: return (state & LAYOUT_SHIFT) ? 0x7C : 0xA5; // | ¬• (ISO)
    case 0x87: return (state & LAYOUT_SHIFT) ? 0x5F : 0x5C; // _ \ (JIS)
    case 0x89: return (state & LAYOUT_SHIFT) ? 0x7C : 0xA5; // | ¬• (JIS)
    default: return 0;
  }
}

unsigned long layout_jis_hiragana_dakuten(unsigned char code, unsigned char state) {
  switch (code) {
    case 0x04: return (state & LAYOUT_SHIFT) ? 0 : 0x3062; // „Å¢ ji
    case 0x05: return (state & LAYOUT_SHIFT) ? 0 : 0x3054; // „Åî go
    case 0x06: return (state & LAYOUT_SHIFT) ? 0 : 0x305E; // „Åû zo
    case 0x07: return (state & LAYOUT_SHIFT) ? 0 : 0x3058; // „Åò zi
    case 0x09: return (state & LAYOUT_SHIFT) ? 0 : 0x3070; // „Å∞ ba
    case 0x0A: return (state & LAYOUT_SHIFT) ? 0 : 0x304E; // „Åé gi
    case 0x0B: return (state & LAYOUT_SHIFT) ? 0 : 0x3050; // „Åê gu
    case 0x13: return (state & LAYOUT_SHIFT) ? 0 : 0x305C; // „Åú ze
    case 0x14: return (state & LAYOUT_SHIFT) ? 0 : 0x3060; // „Å† da
    case 0x15: return (state & LAYOUT_SHIFT) ? 0 : 0x305A; // „Åö zu
    case 0x16: return (state & LAYOUT_SHIFT) ? 0 : 0x3069; // „Å© do
    case 0x17: return (state & LAYOUT_SHIFT) ? 0 : 0x304C; // „Åå ga
    case 0x19: return (state & LAYOUT_SHIFT) ? 0 : 0x3073; // „Å≥ bi
    case 0x1A: return (state & LAYOUT_SHIFT) ? 0 : 0x3067; // „Åß de
    case 0x1B: return (state & LAYOUT_SHIFT) ? 0 : 0x3056; // „Åñ za
    case 0x1D: return (state & LAYOUT_SHIFT) ? 0 : 0x3065; // „Å• ju
    case 0x1F: return (state & LAYOUT_SHIFT) ? 0 : 0x3076; // „Å∂ bu
    case 0x21: return (state & LAYOUT_SHIFT) ? 0 : 0x3094; // „Çî vu
    case 0x2C: return (state & LAYOUT_ALT) ? 0x3099 : 0x309B; // combining / spacing
    case 0x2D: return (state & LAYOUT_SHIFT) ? 0 : 0x307C; // „Åº bo
    case 0x2E: return (state & LAYOUT_SHIFT) ? 0 : 0x3079; // „Åπ be
    case 0x34: return (state & LAYOUT_SHIFT) ? 0 : 0x3052; // „Åí ge
    default: return 0;
  }
}

unsigned long layout_jis_katakana_dakuten(unsigned char code, unsigned char state) {
  switch (code) {
    case 0x04: return (state & LAYOUT_SHIFT) ? 0 : 0x30C2; // „ÉÇ ji
    case 0x05: return (state & LAYOUT_SHIFT) ? 0 : 0x30B4; // „Ç¥ go
    case 0x06: return (state & LAYOUT_SHIFT) ? 0 : 0x30BE; // „Çæ zo
    case 0x07: return (state & LAYOUT_SHIFT) ? 0 : 0x30B8; // „Ç∏ zi
    case 0x09: return (state & LAYOUT_SHIFT) ? 0 : 0x30D0; // „Éê ba
    case 0x0A: return (state & LAYOUT_SHIFT) ? 0 : 0x30AE; // „ÇÆ gi
    case 0x0B: return (state & LAYOUT_SHIFT) ? 0 : 0x30B0; // „Ç∞ gu
    case 0x0C: return (state & LAYOUT_SHIFT) ? 0x30F9 : 0; // „Éπ we
    case 0x13: return (state & LAYOUT_SHIFT) ? 0 : 0x30BC; // „Çº ze
    case 0x14: return (state & LAYOUT_SHIFT) ? 0 : 0x30C0; // „ÉÄ da
    case 0x15: return (state & LAYOUT_SHIFT) ? 0 : 0x30BA; // „Ç∫ zu
    case 0x16: return (state & LAYOUT_SHIFT) ? 0 : 0x30C9; // „Éâ do
    case 0x17: return (state & LAYOUT_SHIFT) ? 0 : 0x30AC; // „Ç¨ ga
    case 0x18: return (state & LAYOUT_SHIFT) ? 0x30F8 : 0; // „É∏ wi
    case 0x19: return (state & LAYOUT_SHIFT) ? 0 : 0x30D3; // „Éì bi
    case 0x1A: return (state & LAYOUT_SHIFT) ? 0 : 0x30C7; // „Éá de
    case 0x1B: return (state & LAYOUT_SHIFT) ? 0 : 0x30B6; // „Ç∂ za
    case 0x1D: return (state & LAYOUT_SHIFT) ? 0 : 0x30C5; // „ÉÖ ju
    case 0x1F: return (state & LAYOUT_SHIFT) ? 0 : 0x30D6; // „Éñ bu
    case 0x21: return (state & LAYOUT_SHIFT) ? 0 : 0x30F4; // „É¥ vu
    case 0x27: return (state & LAYOUT_SHIFT) ? 0x30FA : 0x30F7; // „É∫ wo / „É∑ wa
    case 0x2C: return (state & LAYOUT_ALT) ? 0x3099 : 0x309B; // combining / spacing
    case 0x2D: return (state & LAYOUT_SHIFT) ? 0 : 0x30DC; // „Éú bo
    case 0x2E: return (state & LAYOUT_SHIFT) ? 0 : 0x30D9; // „Éô be
    case 0x34: return (state & LAYOUT_SHIFT) ? 0 : 0x30B2; // „Ç≤ ge
    default: return 0;
  }
}

unsigned long layout_jis_hiragana_handakuten(unsigned char code, unsigned char state) {
  switch (code) {
    case 0x09: return (state & LAYOUT_SHIFT) ? 0 : 0x3071; // „Å± pa
    case 0x19: return (state & LAYOUT_SHIFT) ? 0 : 0x3074; // „Å¥ pi
    case 0x1F: return (state & LAYOUT_SHIFT) ? 0 : 0x3077; // „Å∑ pu
    case 0x2C: return (state & LAYOUT_ALT) ? 0x309A : 0x309C; // combining / spacing
    case 0x2D: return (state & LAYOUT_SHIFT) ? 0 : 0x307D; // „ÅΩ po
    case 0x2E: return (state & LAYOUT_SHIFT) ? 0 : 0x307A; // „Å∫ pe
    default: return 0;
  }
}

unsigned long layout_jis_katakana_handakuten(unsigned char code, unsigned char state) {
  switch (code) {
    case 0x09: return (state & LAYOUT_SHIFT) ? 0 : 0x30D1; // „Éë pa
    case 0x19: return (state & LAYOUT_SHIFT) ? 0 : 0x30D4; // „Éî pi
    case 0x1F: return (state & LAYOUT_SHIFT) ? 0 : 0x30D7; // „Éó pu
    case 0x2C: return (state & LAYOUT_ALT) ? 0x309A : 0x309C; // combining / spacing
    case 0x2D: return (state & LAYOUT_SHIFT) ? 0 : 0x30DD; // „Éù po
    case 0x2E: return (state & LAYOUT_SHIFT) ? 0 : 0x30DA; // „Éö pe
    default: return 0;
  }
}

unsigned long layout_jis_hiragana(unsigned char code, unsigned char state) {
  switch (state & LAYOUT_DEAD_KEY) {
    case LAYOUT_DEAD_DIERESIS: return layout_jis_hiragana_dakuten(code, state);
    case LAYOUT_DEAD_RING: return layout_jis_hiragana_handakuten(code, state);
  }
  switch (code) {
    case 0x04: return (state & LAYOUT_SHIFT) ? 0x1B139 : 0x3061; // „ÄÄ (chi) / „Å° chi
    case 0x05: return (state & LAYOUT_SHIFT) ? 0x1B132 : 0x3053; // õÑ≤ (ko)  / „Åì ko
    case 0x06: return (state & LAYOUT_SHIFT) ? 0x1B14D : 0x305D; // „ÄÄ (ru)  / „Åù so
    case 0x07: return (state & LAYOUT_SHIFT) ? 0x1B134 : 0x3057; // „ÄÄ (shi) / „Åó shi
    case 0x08: return (state & LAYOUT_SHIFT) ? 0x3043  : 0x3044; // „ÅÉ (i)   / „ÅÑ i
    case 0x09: return (state & LAYOUT_SHIFT) ? 0x1B141 : 0x306F; // „ÄÄ (ha)  / „ÅØ ha
    case 0x0A: return (state & LAYOUT_SHIFT) ? 0x1B130 : 0x304D; // „ÄÄ (ki)  / „Åç ki
    case 0x0B: return (state & LAYOUT_SHIFT) ? 0x1B131 : 0x304F; // „ÄÄ (ku)  / „Åè ku
    case 0x0C: return (state & LAYOUT_SHIFT) ? 0x3091  : 0x306B; // „Çë we    / „Å´ ni
    case 0x0D: return (state & LAYOUT_SHIFT) ? 0x1B150 : 0x307E; // õÖê (wi)  / „Åæ ma
    case 0x0E: return (state & LAYOUT_SHIFT) ? 0x1B151 : 0x306E; // õÖë (we)  / „ÅÆ no
    case 0x0F: return (state & LAYOUT_SHIFT) ? 0x1B14C : 0x308A; // „ÄÄ (ri)  / „Çä ri
    case 0x10: return (state & LAYOUT_SHIFT) ? 0x1B152 : 0x3082; // õÖí (wo)  / „ÇÇ mo
    case 0x11: return (state & LAYOUT_SHIFT) ? 0x308E  : 0x307F; // „Çé (wa)  / „Åø mi
    case 0x12: return (state & LAYOUT_SHIFT) ? 0x1B14B : 0x3089; // „ÄÄ (ra)  / „Çâ ra
    case 0x13: return (state & LAYOUT_SHIFT) ? 0x30FC  : 0x305B; // „Éº --    / „Åõ se
    case 0x14: return (state & LAYOUT_SHIFT) ? 0x1B138 : 0x305F; // „ÄÄ (ta)  / „Åü ta
    case 0x15: return (state & LAYOUT_SHIFT) ? 0x1B135 : 0x3059; // „ÄÄ (su)  / „Åô su
    case 0x16: return (state & LAYOUT_SHIFT) ? 0x1B13B : 0x3068; // „ÄÄ (to)  / „Å® to
    case 0x17: return (state & LAYOUT_SHIFT) ? 0x3095  : 0x304B; // „Çï (ka)  / „Åã ka
    case 0x18: return (state & LAYOUT_SHIFT) ? 0x3090  : 0x306A; // „Çê wi    / „Å™ na
    case 0x19: return (state & LAYOUT_SHIFT) ? 0x1B142 : 0x3072; // „ÄÄ (hi)  / „Å≤ hi
    case 0x1A: return (state & LAYOUT_SHIFT) ? 0x1B13A : 0x3066; // „ÄÄ (te)  / „Å¶ te
    case 0x1B: return (state & LAYOUT_SHIFT) ? 0x1B148 : 0x3055; // „ÄÄ (mu)  / „Åï sa
    case 0x1C: return (state & LAYOUT_SHIFT) ? 0x1B153 : 0x3093; // „ÄÄ (n)   / „Çì n
    case 0x1D: return (state & LAYOUT_SHIFT) ? 0x3063  : 0x3064; // „Å£ (tsu) / „Å§ tsu
    case 0x1E: return (state & LAYOUT_SHIFT) ? 0x1B13E : 0x306C; // „ÄÄ (nu)  / „Å¨ nu
    case 0x1F: return (state & LAYOUT_SHIFT) ? 0x1B143 : 0x3075; // „ÄÄ (fu)  / „Åµ fu
    case 0x20: return (state & LAYOUT_SHIFT) ? 0x3041  : 0x3042; // „ÅÅ (a)   / „ÅÇ a
    case 0x21: return (state & LAYOUT_SHIFT) ? 0x3045  : 0x3046; // „ÅÖ (u)   / „ÅÜ u
    case 0x22: return (state & LAYOUT_SHIFT) ? 0x3047  : 0x3048; // „Åá (e)   / „Åà e
    case 0x23: return (state & LAYOUT_SHIFT) ? 0x3049  : 0x304A; // „Åâ (o)   / „Åä o
    case 0x24: return (state & LAYOUT_SHIFT) ? 0x3083  : 0x3084; // „ÇÉ (ya)  / „ÇÑ ya
    case 0x25: return (state & LAYOUT_SHIFT) ? 0x3085  : 0x3086; // „ÇÖ (yu)  / „ÇÜ yu
    case 0x26: return (state & LAYOUT_SHIFT) ? 0x3087  : 0x3088; // „Çá (yo)  / „Çà yo
    case 0x27: return (state & LAYOUT_SHIFT) ? 0x3092  : 0x308F; // „Çí wo    / „Çè wa
    case 0x2C: return 0x3000; // idsp
    case 0x2D: return (state & LAYOUT_SHIFT) ? 0x1B145 : 0x307B; // „ÄÄ (ho)  / „Åª ho
    case 0x2E: return (state & LAYOUT_SHIFT) ? 0x1B144 : 0x3078; // „ÄÄ (he)  / „Å∏ he
    case 0x2F: return (state & LAYOUT_SHIFT) ? 0x00A5  : (LAYOUT_SWITCH_STATE | LAYOUT_DEAD_DIERESIS); // yen / dakuten
    case 0x30: return (state & LAYOUT_SHIFT) ? 0x300C  : (LAYOUT_SWITCH_STATE | LAYOUT_DEAD_RING    ); // „Äå / handakuten
    case 0x31: return (state & LAYOUT_SHIFT) ? 0x300D  : 0x3080; // „Äç rtbkt / „ÇÄ mu (ANSI)
    case 0x32: return (state & LAYOUT_SHIFT) ? 0x300D  : 0x3080; // „Äç rtbkt / „ÇÄ mu (ISO/JIS)
    case 0x33: return (state & LAYOUT_SHIFT) ? 0x1B14E : 0x308C; // „ÄÄ (re)  / „Çå re
    case 0x34: return (state & LAYOUT_SHIFT) ? 0x3096  : 0x3051; // „Çñ (ke)  / „Åë ke
    case 0x35: return (state & LAYOUT_SHIFT) ? 0x1B14F : 0x308D; // „ÄÄ (ro)  / „Çç ro (ANSI/ISO)
    case 0x36: return (state & LAYOUT_SHIFT) ? 0x3001  : 0x306D; // „ÄÅ comma / „Å≠ ne
    case 0x37: return (state & LAYOUT_SHIFT) ? 0x3002  : 0x308B; // „ÄÇ stop  / „Çã ru
    case 0x38: return (state & LAYOUT_SHIFT) ? 0x30FB  : 0x3081; // „Éª mdot  / „ÇÅ me
    case 0x64: return (state & LAYOUT_SHIFT) ? 0x007C  : 0x30FC; // |„ÄÄpipe  / „Éº -- (ISO)
    case 0x87: return (state & LAYOUT_SHIFT) ? 0x1B14F : 0x308D; // „ÄÄ (ro)  / „Çç ro (JIS)
    case 0x89: return (state & LAYOUT_SHIFT) ? 0x007C  : 0x30FC; // |„ÄÄpipe  / „Éº -- (JIS)
    default: return 0;
  }
}

unsigned long layout_jis_katakana(unsigned char code, unsigned char state) {
  switch (state & LAYOUT_DEAD_KEY) {
    case LAYOUT_DEAD_DIERESIS: return layout_jis_katakana_dakuten(code, state);
    case LAYOUT_DEAD_RING: return layout_jis_katakana_handakuten(code, state);
  }
  switch (code) {
    case 0x04: return (state & LAYOUT_SHIFT) ? 0x1B15A : 0x30C1; // „ÄÄ (chi) / „ÉÅ chi
    case 0x05: return (state & LAYOUT_SHIFT) ? 0x1B155 : 0x30B3; // õÖï (ko)  / „Ç≥ ko
    case 0x06: return (state & LAYOUT_SHIFT) ? 0x31FD  : 0x30BD; // „áΩ (ru)  / „ÇΩ so
    case 0x07: return (state & LAYOUT_SHIFT) ? 0x31F1  : 0x30B7; // „á± (shi) / „Ç∑ shi
    case 0x08: return (state & LAYOUT_SHIFT) ? 0x30A3  : 0x30A4; // „Ç£ (i)   / „Ç§ i
    case 0x09: return (state & LAYOUT_SHIFT) ? 0x31F5  : 0x30CF; // „áµ (ha)  / „Éè ha
    case 0x0A: return (state & LAYOUT_SHIFT) ? 0x1B154 : 0x30AD; // „ÄÄ (ki)  / „Ç≠ ki
    case 0x0B: return (state & LAYOUT_SHIFT) ? 0x31F0  : 0x30AF; // „á∞ (ku)  / „ÇØ ku
    case 0x0C: return (state & LAYOUT_SHIFT) ? 0x30F1  : 0x30CB; // „É± we    / „Éã ni
    case 0x0D: return (state & LAYOUT_SHIFT) ? 0x1B164 : 0x30DE; // õÖ§ (wi)  / „Éû ma
    case 0x0E: return (state & LAYOUT_SHIFT) ? 0x1B165 : 0x30CE; // õÖ• (we)  / „Éé no
    case 0x0F: return (state & LAYOUT_SHIFT) ? 0x31FC  : 0x30EA; // „áº (ri)  / „É™ ri
    case 0x10: return (state & LAYOUT_SHIFT) ? 0x1B166 : 0x30E2; // õÖ¶ (wo)  / „É¢ mo
    case 0x11: return (state & LAYOUT_SHIFT) ? 0x30EE  : 0x30DF; // „ÉÆ (wa)  / „Éü mi
    case 0x12: return (state & LAYOUT_SHIFT) ? 0x31FB  : 0x30E9; // „áª (ra)  / „É© ra
    case 0x13: return (state & LAYOUT_SHIFT) ? 0x30FC  : 0x30BB; // „Éº --    / „Çª se
    case 0x14: return (state & LAYOUT_SHIFT) ? 0x1B159 : 0x30BF; // „ÄÄ (ta)  / „Çø ta
    case 0x15: return (state & LAYOUT_SHIFT) ? 0x31F2  : 0x30B9; // „á≤ (su)  / „Çπ su
    case 0x16: return (state & LAYOUT_SHIFT) ? 0x31F3  : 0x30C8; // „á≥ (to)  / „Éà to
    case 0x17: return (state & LAYOUT_SHIFT) ? 0x30F5  : 0x30AB; // „Éµ (ka)  / „Ç´ ka
    case 0x18: return (state & LAYOUT_SHIFT) ? 0x30F0  : 0x30CA; // „É∞ wi    / „Éä na
    case 0x19: return (state & LAYOUT_SHIFT) ? 0x31F6  : 0x30D2; // „á∂ (hi)  / „Éí hi
    case 0x1A: return (state & LAYOUT_SHIFT) ? 0x1B15B : 0x30C6; // „ÄÄ (te)  / „ÉÜ te
    case 0x1B: return (state & LAYOUT_SHIFT) ? 0x31FA  : 0x30B5; // „á∫ (mu)  / „Çµ sa
    case 0x1C: return (state & LAYOUT_SHIFT) ? 0x1B167 : 0x30F3; // õÖß (n)   / „É≥ n
    case 0x1D: return (state & LAYOUT_SHIFT) ? 0x30C3  : 0x30C4; // „ÉÉ (tsu) / „ÉÑ tsu
    case 0x1E: return (state & LAYOUT_SHIFT) ? 0x31F4  : 0x30CC; // „á¥ (nu)  / „Éå nu
    case 0x1F: return (state & LAYOUT_SHIFT) ? 0x31F7  : 0x30D5; // „á∑ (fu)  / „Éï fu
    case 0x20: return (state & LAYOUT_SHIFT) ? 0x30A1  : 0x30A2; // „Ç° (a)   / „Ç¢ a
    case 0x21: return (state & LAYOUT_SHIFT) ? 0x30A5  : 0x30A6; // „Ç• (u)   / „Ç¶ u
    case 0x22: return (state & LAYOUT_SHIFT) ? 0x30A7  : 0x30A8; // „Çß (e)   / „Ç® e
    case 0x23: return (state & LAYOUT_SHIFT) ? 0x30A9  : 0x30AA; // „Ç© (o)   / „Ç™ o
    case 0x24: return (state & LAYOUT_SHIFT) ? 0x30E3  : 0x30E4; // „É£ (ya)  / „É§ ya
    case 0x25: return (state & LAYOUT_SHIFT) ? 0x30E5  : 0x30E6; // „É• (yu)  / „É¶ yu
    case 0x26: return (state & LAYOUT_SHIFT) ? 0x30E7  : 0x30E8; // „Éß (yo)  / „É® yo
    case 0x27: return (state & LAYOUT_SHIFT) ? 0x30F2  : 0x30EF; // „É≤ wo    / „ÉØ wa
    case 0x2C: return 0x3000; // idsp
    case 0x2D: return (state & LAYOUT_SHIFT) ? 0x31F9  : 0x30DB; // „áπ (ho)  / „Éõ ho
    case 0x2E: return (state & LAYOUT_SHIFT) ? 0x31F8  : 0x30D8; // „á∏ (he)  / „Éò he
    case 0x2F: return (state & LAYOUT_SHIFT) ? 0x00A5  : (LAYOUT_SWITCH_STATE | LAYOUT_DEAD_DIERESIS); // yen / dakuten
    case 0x30: return (state & LAYOUT_SHIFT) ? 0x300C  : (LAYOUT_SWITCH_STATE | LAYOUT_DEAD_RING    ); // „Äå / handakuten
    case 0x31: return (state & LAYOUT_SHIFT) ? 0x300D  : 0x30E0; // „Äç rtbkt / „É† mu (ANSI)
    case 0x32: return (state & LAYOUT_SHIFT) ? 0x300D  : 0x30E0; // „Äç rtbkt / „É† mu (ISO/JIS)
    case 0x33: return (state & LAYOUT_SHIFT) ? 0x31FE  : 0x30EC; // „áæ (re)  / „É¨ re
    case 0x34: return (state & LAYOUT_SHIFT) ? 0x30F6  : 0x30B1; // „É∂ (ke)  / „Ç± ke
    case 0x35: return (state & LAYOUT_SHIFT) ? 0x31FF  : 0x30ED; // „áø (ro)  / „É≠ ro (ANSI/ISO)
    case 0x36: return (state & LAYOUT_SHIFT) ? 0x3001  : 0x30CD; // „ÄÅ comma / „Éç ne
    case 0x37: return (state & LAYOUT_SHIFT) ? 0x3002  : 0x30EB; // „ÄÇ stop  / „É´ ru
    case 0x38: return (state & LAYOUT_SHIFT) ? 0x30FB  : 0x30E1; // „Éª mdot  / „É° me
    case 0x64: return (state & LAYOUT_SHIFT) ? 0x007C  : 0x30FC; // |„ÄÄpipe  / „Éº -- (ISO)
    case 0x87: return (state & LAYOUT_SHIFT) ? 0x31FF  : 0x30ED; // „áø (ro)  / „É≠ ro (JIS)
    case 0x89: return (state & LAYOUT_SHIFT) ? 0x007C  : 0x30FC; // |„ÄÄpipe  / „Éº -- (JIS)
    default: return 0;
  }
}
